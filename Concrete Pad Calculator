using System;
using System.Collections;
using System.Collections.Generic;

using Rhino;
using Rhino.Geometry;

using Grasshopper;
using Grasshopper.Kernel;
using Grasshopper.Kernel.Data;
using Grasshopper.Kernel.Types;

using System.IO;
using System.Linq;
using System.Data;
using System.Drawing;
using System.Reflection;
using System.Windows.Forms;
using System.Xml;
using System.Xml.Linq;
using System.Runtime.InteropServices;

using Rhino.DocObjects;
using Rhino.Collections;
using GH_IO;
using GH_IO.Serialization;

/// <summary>
/// This class will be instantiated on demand by the Script component.
/// </summary>
public class Script_Instance : GH_ScriptInstance
{
#region Utility functions
  /// <summary>Print a String to the [Out] Parameter of the Script component.</summary>
  /// <param name="text">String to print.</param>
  private void Print(string text) { /* Implementation hidden. */ }
  /// <summary>Print a formatted String to the [Out] Parameter of the Script component.</summary>
  /// <param name="format">String format.</param>
  /// <param name="args">Formatting parameters.</param>
  private void Print(string format, params object[] args) { /* Implementation hidden. */ }
  /// <summary>Print useful information about an object instance to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj) { /* Implementation hidden. */ }
  /// <summary>Print the signatures of all the overloads of a specific method to the [Out] Parameter of the Script component. </summary>
  /// <param name="obj">Object instance to parse.</param>
  private void Reflect(object obj, string method_name) { /* Implementation hidden. */ }
#endregion

#region Members
  /// <summary>Gets the current Rhino document.</summary>
  private readonly RhinoDoc RhinoDocument;
  /// <summary>Gets the Grasshopper document that owns this script.</summary>
  private readonly GH_Document GrasshopperDocument;
  /// <summary>Gets the Grasshopper script component that owns this script.</summary>
  private readonly IGH_Component Component;
  /// <summary>
  /// Gets the current iteration count. The first call to RunScript() is associated with Iteration==0.
  /// Any subsequent call within the same solution will increment the Iteration count.
  /// </summary>
  private readonly int Iteration;
#endregion

  /// <summary>
  /// This procedure contains the user code. Input parameters are provided as regular arguments,
  /// Output parameters as ref arguments. You don't have to assign output parameters,
  /// they will have a default value.
  /// </summary>
  private void RunScript(double P, double fsa, double sbc, double fsb, double a, double fck, double SC, ref object G, ref object V, ref object Rs, ref object Mu, ref object D, ref object w)
  {
    //Calculator

    //aof is the Area of Footing, it is determined by dividing the Principle Load (P)
    //times the Factor of Safety a (fsa)
    //side = actual side of footing
    // wside = whole number side of footing
    //qu = soil reaction
    //mu = factor Moment of critical Section of footing
    //d= depth of footing
    double d;
    double mu;
    double qu;
    double aof;
    double Pa;
    double side;
    double wside;
    double x;
    double y;
    double z;
    Pa = (P * fsa);
    aof = (Pa / sbc);
    side = Math.Sqrt(aof);
    wside = Math.Round(side);
    qu = (P * fsb) / aof;
    mu = (Pa * wside * ((wside - (a / 1000)) / 2 * (wside - (a / 1000)) / 2)) / 2;
    d = Math.Sqrt((mu * 1000000) / (SC * fck * wside * 1000));
    Rs = qu;
    Mu = mu;
    D = d;
    Point3d PtO = new Point3d(0, 0, -d / 2);
    Vector3d unitX = new Vector3d(1, 0, 0);
    Vector3d unitY = new Vector3d(0, 1, 0);
    Plane p;
    x = y = 1000 * wside / 2;
    z = d / 2;

    //Geometry Builder


    Interval xInterval = new Interval(-x, x);
    Interval yInterval = new Interval(-y, y);
    Interval zInterval = new Interval(-z, z);
    p = new Plane(PtO, unitX, unitY);
    Box ghBox = new Box(p, xInterval, yInterval, zInterval);
    G = ghBox;

    //Properties Calculator
    double density;
    double volume;
    density = 2400;
    volume = d * wside * wside;
    V = volume / 1000;
    w = density * volume / 1000;



  }

  // <Custom additional code> 

  // </Custom additional code> 
}
